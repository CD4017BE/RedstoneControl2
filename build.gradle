buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mc_version}-${mod_version}"
group = "com.cd4017be.rs_ctr" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "redstonecontrol2"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.
compileJava.options.encoding = 'UTF-8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
sourceSets {
	main {
		java { srcDirs = ["$projectDir/src/main/java"] }
		resources { srcDirs = ["$projectDir/src/main/resources"] }
	}
}

minecraft {
	// The mappings can be changed at any time, and must be in the following format.
	// Channel:   Version:
	// snapshot   YYYYMMDD   Snapshot are built nightly.
	// stable     #          Stables are built at the discretion of the MCP team.
	// official   MCVersion  Official field/method names from Mojang mapping files
	//
	// You must be aware of the Mojang license when using the 'official' mappings.
	// See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
	//
	// Use non-default mappings at your own risk. they may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: 'official', version: "${mc_version}"
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run/client')

			// Recommended logging data for a userdev environment
			// The markers can be changed as needed. 
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			// Mixin fix for Patchouli
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			mods {
				rs_ctr {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run/server')

			// Recommended logging data for a userdev environment
			// The markers can be changed as needed. 
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			mods {
				rs_ctr {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run/data')

			// Recommended logging data for a userdev environment
			// The markers can be changed as needed. 
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', 'rs_ctr', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/resources/')

			mods {
				rs_ctr {
					source sourceSets.main
				}
			}
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		// location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.k-4u.nl"
	}
	maven { url 'https://maven.blamejared.com' }

}

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
	
	// compile against the JEI API but do not include it at runtime
	compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
	// at runtime, use the full JEI jar
	runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
	// Patchouli
	compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
	runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
	// CD4017BE_lib: using deobf version here because source code attachment isn't working with fg.deobf()
	//implementation fg.deobf(files("./libs/*"))
	implementation fileTree(dir: 'libs', include: '*.jar')
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
}

tasks.build.dependsOn('deobfJar')
tasks.publish.dependsOn('build')

artifacts {
	archives deobfJar
	archives jar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
			"Specification-Title": "redstonecontrol2",
			"Specification-Vendor": "cd4017be",
			"Specification-Version": "${mod_version}",
			"Implementation-Title": project.name,
			"Implementation-Version": "${mod_version}",
			"Implementation-Vendor" :"cd4017be",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
	publications {
		gpr(MavenPublication) {
			artifactId archivesBaseName
			artifact jar
			artifact deobfJar
		}
	}
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/cd4017be/redstonecontrol2")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
				password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
			}
		}
	}
}
