{
  "itemGroup.rs_ctr2": "Redstone Control 2",
  "msg.rs_ctr2.battery": "%s / %s RF in %s Cells",
  "msg.rs_ctr2.decode_hex": "§bDecoding file in intel hex format ...",
  "msg.rs_ctr2.decode_img": "§bDecoding file as image with %sd bits per pixel ...",
  "msg.rs_ctr2.decode_bin": "§bDecoding file as raw binary data ...",
  "msg.rs_ctr2.decode_bmp": "§bDecoding file as bitmap ...",
  "msg.rs_ctr2.import_succ": "§aMemory import successfull!",
  "msg.rs_ctr2.encode_hex": "§bEncoding file in intel hex format ...",
  "msg.rs_ctr2.encode_img": "§bEncoding file as %sdx%sd image with %sd bits per pixel ...",
  "msg.rs_ctr2.encode_bin": "§bEncoding file as raw binary data ...",
  "msg.rs_ctr2.encode_bmp": "§bEncoding file as %sdx%sd bitmap ...",
  "msg.rs_ctr2.export_succ": "§aMemory export successfull!",
  "msg.rs_ctr2.dir_invalid": "§4To protect you from accidentally corrupting game files or other important data, you can not export to files outside the \"rs_ctr2/memory/\" directory.",
  "msg.rs_ctr.no_file": "§cThe selected file doesn't exist!",
  "gui.rs_ctr2.constant": "Value",
  "gui.rs_ctr2.ram": "Memory content",
  "gui.rs_ctr2.ram.layout": "%s2$d words of size %sd bit",
  "gui.rs_ctr2.fmt_w": "Image width\n§7for .png export\nBytes per line\n§7for .hex export",
  "gui.rs_ctr2.fmt_h": "Image height\n§7for .png export",
  "gui.rs_ctr2.import_file": "Import memory from file",
  "gui.rs_ctr2.export_file": "Export memory to file",
  "gui.rs_ctr2.item_placer": "controlled Item User",
  "gui.rs_ctr2.item_placer.slot": "Equipped Item:\n§7Slot: §4%sd §8= bits[0...5]",
  "gui.rs_ctr2.item_placer.aim": "Block surface aim:\n§7right: %sd §8& 0x0F0000\n§7up: %sd §8& 0xF00000",
  "gui.rs_ctr2.item_placer.look": "Look orientation:\n§7yaw: §4%sd §8& 0x000300\n§7pitch: §2%sd §8& 0x000C00\n§7§orelative to §1§oFront",
  "gui.rs_ctr2.item_placer.sneak0": "Crouching: No\n§80x001000",
  "gui.rs_ctr2.item_placer.sneak1": "Crouching: Yes\n§80x00§f1§8000",
  "gui.rs_ctr2.item_placer.side0": "allow existing blocks\n§80x004000",
  "gui.rs_ctr2.item_placer.side1": "don't allow existing blocks\n§80x00§f4§8000",
  "gui.rs_ctr2.item_placer.air0": "Use on Blocks\n§80x008000",
  "gui.rs_ctr2.item_placer.air1": "Use in Air\n§80x00§f8§8000",
  "advancements.rs_ctr2.root": "Redstone Control",
  "advancements.rs_ctr2.root.desc": "All about compact circuitry.",
  "advancements.rs_ctr2.microblocks": "Small Construction",
  "advancements.rs_ctr2.microblocks.desc": "Cut a block into bits using a Microblock Workbench.",
  "advancements.rs_ctr2.replicate": "Mass production",
  "advancements.rs_ctr2.replicate.desc": "Build a Microblock Structure and replicate it 16 times using the Microblock Workbench.",
  "advancements.rs_ctr2.io": "Redstone I/O",
  "advancements.rs_ctr2.io.desc": "Communicate with the outside world via readers and emitters.",
  "advancements.rs_ctr2.probe": "Circuit Probing",
  "advancements.rs_ctr2.probe.desc": "Use a Gate Probe to see what your circuit is doing.",
  "advancements.rs_ctr2.logic": "Low Level Computation",
  "advancements.rs_ctr2.logic.desc": "It's all logical!",
  "advancements.rs_ctr2.arithmetic": "High Level Computation",
  "advancements.rs_ctr2.arithmetic.desc": "Finally I can do basic math!",
  "advancements.rs_ctr2.energy": "Power for small machines",
  "advancements.rs_ctr2.energy.desc": "Find a way to supply energy to your Microblocks.",
  "advancements.rs_ctr2.logistics": "Small scale logistics",
  "advancements.rs_ctr2.logistics.desc": "Transport items and fluids through your Microblocks.",
  "item.rs_ctr2.data_cable": "Data Cable",
  "item.rs_ctr2.data_cable.tip": "Connects §none§7 data §aoutput§7\nwith §none§7 data §9input§7.",
  "item.rs_ctr2.logic_in": "Logic reader",
  "item.rs_ctr2.logic_in.tip": "§a⏴§7[t+1] = -1 (all bits high) if received external redstone signal > 0, otherwise 0.",
  "item.rs_ctr2.analog_in": "Analog reader / ADC",
  "item.rs_ctr2.analog_in.tip": "§a⏴§7[t+1] = received external redstone signal.",
  "item.rs_ctr2.comp_in": "Comparator reader",
  "item.rs_ctr2.comp_in.tip": "§a⏴§7[t+1] = external block's comparator signal.",
  "item.rs_ctr2.logic_out": "Logic emitter",
  "item.rs_ctr2.logic_out.tip": "Emits an external redstone signal of 15 if §9⏴§7 ≠ 0 (any bit high), otherwise emits 0.",
  "item.rs_ctr2.analog_out": "Analog emitter / DAC",
  "item.rs_ctr2.analog_out.tip": "Emits an external redstone signal equal to §9⏴§7.\nSignals outside 0..15 are possible!",
  "item.rs_ctr2.splitter.tip": "Repeats its data input to its 5 outputs.",
  "item.rs_ctr2.splitter": "Data Splitter",
  "item.rs_ctr2.constant.tip": "§a⏵§7 = number set in GUI (interact with block).",
  "item.rs_ctr2.constant": "Constant",
  "item.rs_ctr2.clock.tip": "§a⏵§7 switches between 0 and -1 every §9⏴§7 ticks,\npausing if §9⏴§7 < 0 and resets (§a⏵§7 = 0) if §9⏴§7 = 0.",
  "item.rs_ctr2.clock": "Clock",
  "item.rs_ctr2.not_gate.tip": "§a⏵§7 = NOT §9⏴§7 (bitwise)",
  "item.rs_ctr2.not_gate": "NOT-Gate",
  "item.rs_ctr2.xor_gate.tip": "§A⏵§7[t+1] = §9⏷§7 exclusive OR §9⏶§7 (bitwise).\nInitial §9⏷⏶§7 = 0.",
  "item.rs_ctr2.xor_gate": "XOR-Gate",
  "item.rs_ctr2.schmitt_trigger.tip": "if (§9⏴§7 - §9⏷§7) * (§9⏶§7 - §9⏷§7) ≤ 0 then §A⏵§7[t+1] = 0\nelse if (§9⏴§7 - §9⏶§7) * (§9⏶§7 - §9⏷§7) ≥ 0 then §A⏵§7[t+1] = -1\nelse §A⏵§7[t+1] = §A⏵§7[t].\nInitial §9⏴⏷⏶§7 = 0.",
  "item.rs_ctr2.schmitt_trigger": "Schmitt Trigger",
  "item.rs_ctr2.or_gate.tip": "§A⏵§7[t+1] = §9⏴§7 OR §9⏷§7 OR §9⏶§7 (bitwise).\nInitial §9⏴⏷⏶§7 = 0.",
  "item.rs_ctr2.or_gate": "OR-Gate",
  "item.rs_ctr2.and_gate.tip": "§A⏵§7[t+1] = §9⏴§7 AND §9⏷§7 AND §9⏶§7 (bitwise).\nInitial §9⏴⏷⏶§7 = -1.",
  "item.rs_ctr2.and_gate": "AND-Gate",
  "item.rs_ctr2.nand_gate.tip": "§A⏵§7[t+1] = NOT(§9⏴§7 AND §9⏷§7 AND §9⏶§7) (bitwise).\nInitial §9⏴⏷⏶§7 = -1.",
  "item.rs_ctr2.nand_gate": "NAND-Gate",
  "item.rs_ctr2.nor_gate.tip": "§A⏵§7[t+1] = NOT(§9⏴§7 OR §9⏷§7 OR §9⏶§7) (bitwise).\nInitial §9⏴⏷⏶§7 = 0.",
  "item.rs_ctr2.nor_gate": "NOR-Gate",
  "item.rs_ctr2.delay.tip": "§A⏵§7[t+1] = §9⏴§7[t].",
  "item.rs_ctr2.delay": "Delay Line",
  "item.rs_ctr2.comparator.tip": "§A⏵§7[t+1] = -1 if §9⏷§7 < §9⏶§7, otherwise 0.\nInitial §9⏷⏶§7 = 0.",
  "item.rs_ctr2.comparator": "Comparator",
  "item.rs_ctr2.sr_latch.tip": "bitwise: if §9⏷§7 high then §A⏵§7[t+1] = low\nelse if §9⏶§7 high then §A⏵§7[t+1] = high\nelse §A⏵§7[t+1] = §A⏵§7[t]\n§a⏴§7 = NOT §A⏵§7, initial §A⏵§7§9⏷⏶§7 = 0.",
  "item.rs_ctr2.sr_latch": "SR-Latch",
  "item.rs_ctr2.item_cable.tip": "Connects §none§7 §finventory §auser§7\nwith §none§7 §finventory §9provider§7.",
  "item.rs_ctr2.item_cable": "Item Cable",
  "item.rs_ctr2.fluid_cable.tip": "Connects §none§7 §bfluid storage §auser§7\nwith §none§7 §bfluid storage §9provider§7.",
  "item.rs_ctr2.fluid_cable": "Fluid Cable",
  "item.rs_ctr2.power_cable.tip": "Connects §none§7 §eenergy storage §auser§7\nwith §none§7 §eenergy storage §9provider§7.",
  "item.rs_ctr2.power_cable": "Power Cable",
  "item.rs_ctr2.fluid_io.tip": "§b⏴§7 provides the fluid storage of an external block.",
  "item.rs_ctr2.fluid_io": "Fluid Port",
  "item.rs_ctr2.power_io.tip": "§e⏴§7 provides the energy storage of an external block.",
  "item.rs_ctr2.power_io": "Power Port",
  "item.rs_ctr2.item_io.tip": "§f⏴§7 provides the inventory of an external block\nfor slots §9⏷§7 to §9⏶§7 inclusive.\nInitial §9⏷§7 = 0, §9⏶§7 = 255.",
  "item.rs_ctr2.item_io": "Item Port",
  "item.rs_ctr2.transformer.tip": "§a⏵§7 = RF/tick transferred from §e⏷§7 to §e⏶§7.\nPower transfer is limited to §9⏴§7[t-1] RF/tick (can be negative).\nInitial §9⏴§7 = 0.",
  "item.rs_ctr2.transformer": "Transformer",
  "item.rs_ctr2.battery.tip": "Adjacent cells combine.\n§e⏺§7 (use power cable) provides energy storage.\n§a⏺§7 (use data cable) outputs stored RF.",
  "item.rs_ctr2.battery": "Battery Cell",
  "item.rs_ctr2.item_splitter.tip": "Re-provides a used inventory 5 times.",
  "item.rs_ctr2.item_splitter": "Item access Splitter",
  "item.rs_ctr2.fluid_splitter.tip": "Re-provides a used fluid storage 5 times.",
  "item.rs_ctr2.fluid_splitter": "Fluid access Splitter",
  "item.rs_ctr2.fluid_mover.tip": "When any bit in §9-⏶§7[t-1] transitions low to high, it tries to transfer §9⏶-§7[t-1] mB of fluid from §b⏴§7 to §b⏵§7, consuming energy from §e⏵§7 and outputs the actually transferred amount to §a⏴§7.\nInitial §9⏶-§7 = 1000.",
  "item.rs_ctr2.fluid_mover": "Fluid Pump",
  "item.rs_ctr2.item_mover.tip": "When any bit in §9-⏶§7[t-1] transitions low to high, it tries to transfer §9⏶-§7[t-1] items from §f⏴§7 to §f⏵§7, consuming energy from §e⏵§7 and outputs the actually transferred amount to §a⏴§7.\nInitial §9⏶-§7 = 64.",
  "item.rs_ctr2.item_mover": "Item Translocator",
  "item.rs_ctr2.power_splitter.tip": "Re-provides a used energy storage 5 times.",
  "item.rs_ctr2.power_splitter": "Power Splitter",
  "item.rs_ctr2.division_gate.tip": "§A⏵§7[t+1] = §9⏶§7 / §9⏷§7,\n§a⏴§7[t+1] = §9⏶§7 mod §9⏷§7.",
  "item.rs_ctr2.division_gate": "Division Gate",
  "item.rs_ctr2.clamp_gate.tip": "§A⏵§7[t+1] = §lx§7 closest to §9⏴§7, with\nmin(§9⏶§7, §9⏷§7) ≤ §lx§7 ≤ max(§9⏶§7, §9⏷§7).",
  "item.rs_ctr2.clamp_gate": "Range Limiter",
  "item.rs_ctr2.data_mux.tip": "§A⏵§7[t+1] = bitwise §9⏴§7 if §9⏶§7 high, otherwise §9⏷§7.",
  "item.rs_ctr2.data_mux": "Data Multiplexer",
  "item.rs_ctr2.sum_gate.tip": "§A⏵§7[t+1] = §9⏴§7 + §9⏶§7 - §9⏷§7.",
  "item.rs_ctr2.sum_gate": "Add/Subtract Gate",
  "item.rs_ctr2.product_gate.tip": "§A⏵§7[t+1] = §9⏴§7 * §9⏶§7 / 2^§9⏷§7.",
  "item.rs_ctr2.product_gate": "Multiply Gate",
  "item.rs_ctr2.or_buffer.tip": "§a⏵§7 = -1 if §9⏴§7 ≠ 0 (any bit high), otherwise 0.",
  "item.rs_ctr2.or_buffer": "OR-Buffer Gate",
  "item.rs_ctr2.bit_shift.tip": "§a⏵§7[t+1] = §9⏴§7 binary shifted left by §9⏶§7 bits (can be negative).",
  "item.rs_ctr2.bit_shift": "Bit Shifter",
  "item.rs_ctr2.neg_gate.tip": "§a⏵§7 = -§9⏴§7",
  "item.rs_ctr2.neg_gate": "Negation Gate",
  "item.rs_ctr2.battery.ext": "Capacity: %sd RF/cell",
  "item.rs_ctr2.item_mover.ext": "Energy consumption: %sd RF/Stack (64 items)",
  "item.rs_ctr2.fluid_mover.ext": "Energy consumption: %sd RF/Bucket (1024mB)",
  "item.rs_ctr2.solarcell.ext": "Peak power: %sd RF/cell every 8 ticks\nIntegrated sun time: %s.3f",
  "item.rs_ctr2.solarcell": "Solar Cell",
  "item.rs_ctr2.solarcell.tip": "Harvests energy from sunlight.\nMust be placed in top layer, adjacent cells combine.\n§e⏺§7 use power cable for power output.",
  "item.rs_ctr2.probe": "Gate Probe",
  "state.rs_ctr2.transformer": "§a0: §c%sd §7RF/t Flow\n§91: §c%sd §7RF/t Limit\n§a2: §7out §e%ss/%sd RF\n§a3: §7into §e%ss/%ss RF",
  "state.rs_ctr2.fluid_mover": "§90: §c0x%s08X§7 Clock\n§91: §c%sd§7 mB Limit\n§a2: §c%sd§7 mB Moved\n§a3: §e%sd RF§7 available energy\n§a4: §bcan pull fluid: %ss\n§a5: §bcan push fluid: %ss",
  "state.rs_ctr2.item_mover": "§90: §c0x%s08X§7 Clock\n§91: §c%sd§7 stack limit\n§a2: §c%sd§7 items moved\n§a3: §e%sd RF§7 available energy\n§a4: §fcan pull items: %ss\n§a5: §fcan push items: %ss",
  "state.rs_ctr2.division": "§a0: §c%d§7 A / B\n§a1: §c%d§7 Remainder\n§92: §c%d§7 A\n§93: §c%d§7 B",
  "state.rs_ctr2.mover": "",
  "state.rs_ctr2.no_connection": "Interact on Gate to monitor!",
  "state.rs_ctr2.in": "§a0: §c0x%s08X %s1$d",
  "state.rs_ctr2.ports": "%sd Port(s):",
  "state.rs_ctr2.out": "§90: §c0x%s08X %s1$d",
  "state.rs_ctr2.none": "<no state information>",
  "state.rs_ctr2.splitter": "§90: §c0x%s08X %s1$d\n§c-> §a1 2 3 4 5",
  "state.rs_ctr2.battery": "§a0: §c%sd§7 RF stored\n§e   %sd§7 RF capacity",
  "state.rs_ctr2.gate1": "§a0: §c0x%s08X %s1$d\n§91: §c0x%s08X %s2$d",
  "state.rs_ctr2.gate2": "§a0: §c0x%s08X %s1$d\n§91: §c0x%s08X %s2$d\n§92: §c0x%s08X %s3$d",
  "state.rs_ctr2.gate3": "§a0: §c0x%s08X %s1$d\n§91: §c0x%s08X %s2$d\n§92: §c0x%s08X %s3$d\n§93: §c0x%s08X %s4$d",
  "state.rs_ctr2.direct": "§90: §c?\n§a1: §c0x%s08X %s1$d",
  "state.rs_ctr2.clock": "§a0: §c0x%s08X§7 Clock\n§91: §c%sd§7 Ticks\nt = %sd",
  "state.rs_ctr2.item_io": "§a0: §5%ss\n§91: §fInventory [%sd Slots]\n§92: §c%sd§7 First Slot\n§93: §c%sd§7 Last Slot",
  "state.rs_ctr2.sr_latch": "§a0: §c0x%s08X§7 Q\n§a1: §c0x%s08X§7 ¬Q\n§92: §c0x%s08X§7 Reset\n§93: §c0x%s08X§7 Set",
  "state.rs_ctr2.comp": "§a0: §c0x%s08X§7 Big > Small\n§91: §c%sd§7 Small\n§92: §c%sd§7 Big",
  "state.rs_ctr2.mux": "§a0: §c0x%s08X %s1$d\n§91: §c0x%s08X§7 Control\n§92: §c0x%s08X %s3$d§7 I0\n§93: §c0x%s08X %s4$d§7 I1",
  "state.rs_ctr2.clamp": "§a0: §c%sd§7 Output\n§91: §c%sd§7 Input\n§92: §c%sd§7 Minimum\n§93: §c%sd§7 Maximum",
  "state.rs_ctr2.sum": "§a0:§7 Σ §c%sd\n§91:§7 + §c%sd\n§92:§7 + §c%sd\n§93:§7 - §c%sd",
  "state.rs_ctr2.shift": "§a0: §c0x%s08X %s1$d\n§91: §c0x%s08X %s2$d\n§92: §c%sd§7 Bit shift <<",
  "state.rs_ctr2.multiply": "§a0:§7 Π §c%sd\n§91:§7 x §c%sd\n§92:§7 x §c%sd\n§93:§7 /2^ §c%sd",
  "state.rs_ctr2.schmitt_trigger": "§a0: §c0x%s08X§7 State\n§91: §c%sd§7 Input\n§92: §c%sd§7 OFF threshold\n§93: §c%sd§7 ON threshold",
  "block.rs_ctr2.autocraft": "Automatic Crafter",
  "gui.rs_ctr2.autocraft": "Buffer            Crafting",
  "gui.rs_ctr2.pattern": "Pattern hex code",
  "item.rs_ctr2.counter": "Counter",
  "item.rs_ctr2.memory": "Memory Cell",
  "item.rs_ctr2.memory.ext": "Size: %sd bit/cell",
  "item.rs_ctr2.mem_write": "Memory Writer",
  "item.rs_ctr2.mem_read": "Memory Reader",
  "state.rs_ctr2.counter": "§a0: §c%sd§7 Count\n§a1: §c0x%s08X§7 Overflow\n§92: §c%sd§7 Max Count\n§93: §c0x%s08X§7 Increment",
  "state.rs_ctr2.mem_read": "§a0: §c0x%sX %s1$d§7 value\n§81: Memory\n§92: §c0x%s04X %s2$d§7 address\n§93: §c%sd§7 bits per word",
  "state.rs_ctr2.memory": "Memory size = %sd bit",
  "state.rs_ctr2.mem_write": "§80: Memory\n§91: §c0x%sX %s1$d§7 value\n§92: §c0x%s04X %s2$d§7 address\n§93: §c%sd§7 bits per word",
  "item.rs_ctr2.counter.tip": "When any bit in §9⏷§7[t-1] transitions low to high then §A⏵§7 increments by one. §A⏵§7 resets to 0 if ≥ §9⏴§7[t-1].\n§A⏶§7 = §9⏷§7[t-1] if §A⏵§7 = 0 AND §9⏴§7[t-1] > 0 otherwise §A⏶§7 = 0.",
  "item.rs_ctr2.mem_read.tip": "§a⏶§7[t+1] = read word of size §9⏴§7 bits at index §9⏷§7 in memory §8⏵§7.\nA read happens @ t+½ when §9⏷§7 or §9⏴§7 changed and §9⏴§7 ≠ 0.\n§4Word size must be a power of two or results are undefined!",
  "item.rs_ctr2.mem_write.tip": "Writes §9⏶§7 as word of size §9⏴§7 bits to index §9⏷§7 in memory §8⏵§7.\nA write happens @ t+1 when §9⏶§7, §9⏷§7 or §9⏴§7 changed and §9⏴§7 ≠ 0.\nWhen multiple writes to the same 32 bit block of the same memory happen in the same tick, only one will succeed!\n§4Word size must be a power of two or results are undefined!",
  "item.rs_ctr2.memory.tip": "Stores data that can be read and written by connected §6Memory Reader§7s and §6Writer§7s.\nContent can be viewed by interacting.\nAdjacent cells combine.\n§4Removing cells or merging structures may cause data loss!",
  "item.rs_ctr2.corerope2": "Core Rope Matrix",
  "item.rs_ctr2.corerope1": "Weaved Core Rope",
  "block.rs_ctr2.block_breaker": "controlled Block Breaker",
  "block.rs_ctr2.item_placer": "controlled Item User",
  "gui.rs_ctr2.item_placer.restock0": "auto restock\n§80x000080",
  "gui.rs_ctr2.item_placer.restock1": "No restock\n§80x0000§f8§80",
  "item.rs_ctr2.block_cable": "Block Interaction Cable",
  "item.rs_ctr2.block_cable.tip": "Connects §none§7 §5block interaction §auser§7\nwith §none§7 §5block interaction §9provider§7.",
  "item.rs_ctr2.block_io": "Block Interaction Port",
  "item.rs_ctr2.block_splitter": "Block Interaction Splitter",
  "item.rs_ctr2.block_splitter.tip": "Re-provides a used block interaction 5 times.",
  "state.rs_ctr2.link1": "%sd #%s08X -> %sd",
  "state.rs_ctr2.link2": "%sd <-> %sd Cable link",
  "state.rs_ctr2.link3": "%sd #%s08X",
  "state.rs_ctr2.links": "     Connection Debug Info:",
  "state.rs_ctr2.link0": "%sd Cable End -> %sd",
  "state.rs_ctr2.autocraft": "§90: §c0x%s08X§7 Crafting Clock\n§91: §c0x%s08X§7 Low 2x3 Pattern\n§92: §c0x%s03X§7 Top 1x3 Pattern\n§93: §c0x%sX§7 I/O Slot\n§94: §fInternal Inventory\n§a5: §c0x%s01X§7 Error Code\n§a6: §e%sd RF§7 available energy",
  "state.rs_ctr2.block_breaker": "§90: §c0x%s08X§7 Clock\n§a1: §c0x%s01X§7 Error Code\n§a2: §e%sd RF§7 available energy\n§a3: §fcan output loot: %ss\n§a4: §5%ss",
  "state.rs_ctr2.item_placer": "§90: §c0x%s08X§7 Clock\n§95: §c0x%s06X§7 Interact Settings\n§a1: §c0x%s01X§7 Error Code\n§a2: §e%sd RF§7 available energy\n§a3: §fcan restock hand: %ss\n§a4: §5%ss",
  "state.rs_ctr2.solar": "Generating %sd RF / 8 ticks\n§a0: §e%sd RF§7 storable energy",
  "state.rs_ctr2.power_io": "§a0: §5%ss\n§91: §e%sd/%sd RF§7 storage",
  "cd4017be.unloaded": "<position unloaded>",
  "state.rs_ctr2.fluid_io": "§a0: §5%ss\n§91: §bis fluid container: %ss",
  "item.rs_ctr2.and_filter": "AND-Filter Gate",
  "item.rs_ctr2.and_filter.tip": "§A⏵§7 = §9⏴§7 AND number set in GUI (interact with block).",
  "state.rs_ctr2.and_filter": "§7#: §c0x%s08X§7 AND-mask\n§90: §c0x%s08X§7 IN\n§a1: §c0x%s08X§7 OUT",
  "item.rs_ctr2.switch": "Small Switch",
  "item.rs_ctr2.led": "Small Lamp",
  "item.rs_ctr2.switch.tip": "§A⏵§7 = -1 if ON, 0 if OFF.",
  "item.rs_ctr2.led.tip": "Lights up if §9⏵§7 ≠ 0.\nInteract with dye to change color.",
  "item.rs_ctr2.switch_array": "Binary Switch Array",
  "item.rs_ctr2.led_array": "Binary Lamp Array",
  "item.rs_ctr2.switch_array.tip": "§a⏵§7 = binary number represented by switches.\nInteract with Switch Arrays on the sides to extend.",
  "item.rs_ctr2.led_array.tip": "Displays §9⏵§7 in binary.\nInteract with Lamp Arrays on the sides to extend.\nInteract with dye to change color.",
  "item.rs_ctr2._7segment": "7-Segment Display",
  "item.rs_ctr2._7segment.tip": "Displays §9⏵§7 as hexadecimal number (see §6BCD-Converter§7).\nInteract with Displays on the sides to extend.\nInteract with dye to change color.",
  "item.rs_ctr2.bcd_converter": "BCD-Converter",
  "item.rs_ctr2.bcd_converter.tip": "§a⏵§7 = §9⏴§7 converted to \"binary counted decimal\".\nUsed to display decimal numbers on §67-Segment Display§7s."
}