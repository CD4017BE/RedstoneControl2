{
  "itemGroup.rs_ctr2": "Redstone Control 2",
  "msg.rs_ctr2.battery": "%s / %s RF in %s Cells",
  "gui.rs_ctr2.destroy": "§cdisassemble\n§7cut blocks",
  "gui.rs_ctr2.replicate": "§areplicate",
  "gui.rs_ctr2.assembler": "Microblock Assembly",
  "gui.rs_ctr2.constant": "Value",
  "advancements.rs_ctr2.root": "Redstone Control",
  "advancements.rs_ctr2.root.desc": "All about compact circuitry.",
  "advancements.rs_ctr2.microblocks": "Small Construction",
  "advancements.rs_ctr2.microblocks.desc": "Cut a block into bits using a Microblock Workbench.",
  "advancements.rs_ctr2.replicate": "Mass production",
  "advancements.rs_ctr2.replicate.desc": "Build a Microblock Structure and replicate it 16 times using the Microblock Workbench.",
  "advancements.rs_ctr2.io": "Redstone I/O",
  "advancements.rs_ctr2.io.desc": "Communicate with the outside world via readers and emitters.",
  "advancements.rs_ctr2.logic": "Low Level Computation",
  "advancements.rs_ctr2.logic.desc": "It's all logical!",
  "advancements.rs_ctr2.arithmetic": "High Level Computation",
  "advancements.rs_ctr2.arithmetic.desc": "Finally I can do basic math!",
  "advancements.rs_ctr2.energy": "Power for small machines",
  "advancements.rs_ctr2.energy.desc": "Find a way to supply energy to your Microblocks.",
  "advancements.rs_ctr2.logistics": "Small scale logistics",
  "advancements.rs_ctr2.logistics.desc": "Transport items and fluids through your Microblocks.",
  "block.rs_ctr2.assembler": "Microblock Workbench",
  "block.rs_ctr2.assembler.tip": "Cuts blocks into 1/4 grid Bits\nand disassembles or replicates\nMicroblock Structures.",
  "block.rs_ctr2.grid": "Microblock Structure",
  "item.rs_ctr2.microblock": "%s Bit",
  "item.rs_ctr2.microblock.tip": "4x4x4 sub piece of a block,\ncrafted in §6Microblock Workbench§7.",
  "item.rs_ctr2.data_cable": "Data Cable",
  "item.rs_ctr2.data_cable.tip": "Connects §none§7 data §aoutput§7\nwith §none§7 data §9input§7.",
  "item.rs_ctr2.logic_in": "Logic reader",
  "item.rs_ctr2.logic_in.tip": "§a⏴§7[t+1] = -1 (all bits high) if received external redstone signal > 0, otherwise 0.",
  "item.rs_ctr2.analog_in": "Analog reader / ADC",
  "item.rs_ctr2.analog_in.tip": "§a⏴§7[t+1] = received external redstone signal.",
  "item.rs_ctr2.comp_in": "Comparator reader",
  "item.rs_ctr2.comp_in.tip": "§a⏴§7[t+1] = external block's comparator signal.",
  "item.rs_ctr2.logic_out": "Logic emitter",
  "item.rs_ctr2.logic_out.tip": "Emits an external redstone signal of 15 if §9⏴§7 ≠ 0 (any bit high), otherwise emits 0.",
  "item.rs_ctr2.analog_out": "Analog emitter / DAC",
  "item.rs_ctr2.analog_out.tip": "Emits an external redstone signal equal to §9⏴§7.\nSignals outside 0..15 are possible!",
  "item.rs_ctr2.splitter.tip": "Repeats its data input to its 5 outputs.",
  "item.rs_ctr2.splitter": "Data Splitter",
  "item.rs_ctr2.constant.tip": "§a⏵§7 = number set in GUI (interact with block).",
  "item.rs_ctr2.constant": "Constant",
  "item.rs_ctr2.clock.tip": "§a⏵§7 switches between 0 and -1 every §9⏴§7 ticks,\npausing if §9⏴§7 < 0 and resets (§a⏵§7 = 0) if §9⏴§7 = 0.",
  "item.rs_ctr2.clock": "Clock",
  "item.rs_ctr2.not_gate.tip": "§a⏵§7 = NOT §9⏴§7 (bitwise)",
  "item.rs_ctr2.not_gate": "NOT-Gate",
  "item.rs_ctr2.xor_gate.tip": "§A⏵§7[t+1] = §9⏷§7 exclusive OR §9⏶§7 (bitwise).\nInitial §9⏷⏶§7 = 0.",
  "item.rs_ctr2.xor_gate": "XOR-Gate",
  "item.rs_ctr2.schmitt_trigger.tip": "if (§9⏴§7 - §9⏷§7) * (§9⏶§7 - §9⏷§7) ≤ 0 then §A⏵§7[t+1] = 0\nelse if (§9⏴§7 - §9⏶§7) * (§9⏶§7 - §9⏷§7) ≥ 0 then §A⏵§7[t+1] = -1\nelse §A⏵§7[t+1] = §A⏵§7[t].\nInitial §9⏴⏷⏶§7 = 0.",
  "item.rs_ctr2.schmitt_trigger": "Schmitt Trigger",
  "item.rs_ctr2.or_gate.tip": "§A⏵§7[t+1] = §9⏴§7 OR §9⏷§7 OR §9⏶§7 (bitwise).\nInitial §9⏴⏷⏶§7 = 0.",
  "item.rs_ctr2.or_gate": "OR-Gate",
  "item.rs_ctr2.and_gate.tip": "§A⏵§7[t+1] = §9⏴§7 AND §9⏷§7 AND §9⏶§7 (bitwise).\nInitial §9⏴⏷⏶§7 = -1.",
  "item.rs_ctr2.and_gate": "AND-Gate",
  "item.rs_ctr2.nand_gate.tip": "§A⏵§7[t+1] = NOT(§9⏴§7 AND §9⏷§7 AND §9⏶§7) (bitwise).\nInitial §9⏴⏷⏶§7 = -1.",
  "item.rs_ctr2.nand_gate": "NAND-Gate",
  "item.rs_ctr2.nor_gate.tip": "§A⏵§7[t+1] = NOT(§9⏴§7 OR §9⏷§7 OR §9⏶§7) (bitwise).\nInitial §9⏴⏷⏶§7 = 0.",
  "item.rs_ctr2.nor_gate": "NOR-Gate",
  "item.rs_ctr2.delay.tip": "§A⏵§7[t+1] = §9⏴§7[t].",
  "item.rs_ctr2.delay": "Delay Line",
  "item.rs_ctr2.comparator.tip": "§A⏵§7[t+1] = -1 if §9⏷§7 < §9⏶§7, otherwise 0.\nInitial §9⏷⏶§7 = 0.",
  "item.rs_ctr2.comparator": "Comparator",
  "item.rs_ctr2.sr_latch.tip": "bitwise: if §9⏷§7 high then §A⏵§7[t+1] = low\nelse if §9⏶§7 high then §A⏵§7[t+1] = high\nelse §A⏵§7[t+1] = §A⏵§7[t]\n§a⏴§7 = NOT §A⏵§7, initial §A⏵§7§9⏷⏶§7 = 0.",
  "item.rs_ctr2.sr_latch": "SR-Latch",
  "item.rs_ctr2.item_cable.tip": "Connects §none§7 §finventory §auser§7\nwith §none§7 §finventory §9provider§7.",
  "item.rs_ctr2.item_cable": "Item Cable",
  "item.rs_ctr2.fluid_cable.tip": "Connects §none§7 §bfluid storage §auser§7\nwith §none§7 §bfluid storage §9provider§7.",
  "item.rs_ctr2.fluid_cable": "Fluid Cable",
  "item.rs_ctr2.power_cable.tip": "Connects §none§7 §eenergy storage §auser§7\nwith §none§7 §eenergy storage §9provider§7.",
  "item.rs_ctr2.power_cable": "Power Cable",
  "item.rs_ctr2.fluid_io.tip": "§b⏴§7 provides the fluid storage of an external block.",
  "item.rs_ctr2.fluid_io": "Fluid Port",
  "item.rs_ctr2.power_io.tip": "§e⏴§7 provides the energy storage of an external block.",
  "item.rs_ctr2.power_io": "Power Port",
  "item.rs_ctr2.item_io.tip": "§f⏴§7 provides the inventory of an external block\nfor slots §9⏷§7 to §9⏶§7 inclusive.\nInitial §9⏷§7 = 0, §9⏶§7 = 255.",
  "item.rs_ctr2.item_io": "Item Port",
  "item.rs_ctr2.transformer.tip": "§a⏵§7 = RF/tick transferred from §e⏷§7 to §e⏶§7.\nPower transfer is limited to §9⏴§7[t-1] RF/tick (can be negative).\nInitial §9⏴§7 = 0.",
  "item.rs_ctr2.transformer": "Transformer",
  "item.rs_ctr2.battery.tip": "Adjacent cells combine.\n§e⏺§7 (use power cable) provides energy storage.\n§a⏺§7 (use data cable) outputs stored RF.",
  "item.rs_ctr2.battery": "Battery Cell",
  "item.rs_ctr2.item_splitter.tip": "Re-provides a used inventory 5 times.",
  "item.rs_ctr2.item_splitter": "Item access Splitter",
  "item.rs_ctr2.fluid_splitter.tip": "Re-provides a used fluid storage 5 times.",
  "item.rs_ctr2.fluid_splitter": "Fluid access Splitter",
  "item.rs_ctr2.fluid_mover.tip": "When any bit in §9-⏶§7[t-1] transitions low to high, it tries to transfer §9⏶-§7[t-1] mB of fluid from §b⏴§7 to §b⏵§7, consuming energy from §e⏵§7 and outputs the actually transferred amount to §a⏴§7.\nInitial §9⏶-§7 = 1000.",
  "item.rs_ctr2.fluid_mover": "Fluid Pump",
  "item.rs_ctr2.item_mover.tip": "When any bit in §9-⏶§7[t-1] transitions low to high, it tries to transfer §9⏶-§7[t-1] items from §f⏴§7 to §f⏵§7, consuming energy from §e⏵§7 and outputs the actually transferred amount to §a⏴§7.\nInitial §9⏶-§7 = 64.",
  "item.rs_ctr2.item_mover": "Item Translocator",
  "item.rs_ctr2.power_splitter.tip": "Re-provides a used energy storage 5 times.",
  "item.rs_ctr2.power_splitter": "Power Splitter",
  "item.rs_ctr2.division_gate.tip": "§A⏵§7[t+1] = §9⏶§7 / §9⏷§7,\n§a⏴§7[t+1] = §9⏶§7 mod §9⏷§7.",
  "item.rs_ctr2.division_gate": "Division Gate",
  "item.rs_ctr2.clamp_gate.tip": "§A⏵§7[t+1] = §lx§7 closest to §9⏴§7, with\nmin(§9⏶§7, §9⏷§7) ≤ §lx§7 ≤ max(§9⏶§7, §9⏷§7).",
  "item.rs_ctr2.clamp_gate": "Range Limiter",
  "item.rs_ctr2.data_mux.tip": "§A⏵§7[t+1] = bitwise §9⏴§7 if §9⏶§7 high, otherwise §9⏷§7.",
  "item.rs_ctr2.data_mux": "Data Multiplexer",
  "item.rs_ctr2.sum_gate.tip": "§A⏵§7[t+1] = §9⏴§7 + §9⏶§7 - §9⏷§7.",
  "item.rs_ctr2.sum_gate": "Add/Subtract Gate",
  "item.rs_ctr2.product_gate.tip": "§A⏵§7[t+1] = §9⏴§7 * §9⏶§7 / 2^§9⏷§7.",
  "item.rs_ctr2.product_gate": "Multiply Gate",
  "item.rs_ctr2.or_buffer.tip": "§a⏵§7 = -1 if §9⏴§7 ≠ 0 (any bit high), otherwise 0.",
  "item.rs_ctr2.or_buffer": "OR-Buffer Gate",
  "item.rs_ctr2.bit_shift.tip": "§a⏵§7[t+1] = §9⏴§7 binary shifted left by §9⏶§7 bits (can be negative).",
  "item.rs_ctr2.bit_shift": "Bit Shifter",
  "item.rs_ctr2.neg_gate.tip": "§a⏵§7 = -§9⏴§7",
  "item.rs_ctr2.neg_gate": "Negation Gate",
  "item.rs_ctr2.battery.ext": "Capacity: %d RF/cell",
  "item.rs_ctr2.item_mover.ext": "Energy consumption: %d RF/Stack (64 items)",
  "item.rs_ctr2.fluid_mover.ext": "Energy consumption: %d RF/Bucket (1024mB)",
  "item.rs_ctr2.solarcell.ext": "Peak power: %d RF / Cell every 8 ticks\nIntegrated sun time: %.2f",
  "item.rs_ctr2.solarcell": "Solar Cell",
  "item.rs_ctr2.solarcell.tip": "Harvests energy from sunlight.\nMust be placed in top layer, adjacent cells combine.\n§e⏺§7 use power cable for power output."
}